// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  MASTER
  ADMIN
  USER
}

enum WikiStatus {
  PENDING
  REJECTED
  APPROVED
}

enum WikiRequestType {
  REQEUST
  APPROVE
  REJECTE
  ABSTENTION
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  email         String      @unique
  password      String
  refreshToken  String?
  role          Role        @default(USER)
  posts         Post[]
  profile       Profile?
}

model Profile {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String      @unique @db.ObjectId
}

model Feed {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  body        String
  provider    String
  postedAt    DateTime
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Wiki {
  id                      String      @id @default(auto()) @map("_id") @db.ObjectId
  topic                   String      @unique
  body                    String
  status                  WikiStatus
  statusHistory           WikiStatusHistory[]
  postedAt                DateTime
  published               Boolean     @default(true)
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
}

model WikiStatusHistory {
  id                      String      @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String      @db.ObjectId
  ip                      String
  requestType             WikiRequestType
  reason                  String?
  wiki                    Wiki        @relation(fields: [wikiId], references: [id])
  wikiId                  String      @db.ObjectId
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
}

model Post {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  slug        String      @unique
  title       String
  body        String
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  comments    Comment[]
  categories  Category[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String      @db.ObjectId
}

model Comment {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId      String      @db.ObjectId
  userName    String
  userId      String      @db.ObjectId
  comment     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  post        Post        @relation(fields: [postId], references: [id])
  postId      String      @db.ObjectId
  category    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}